// Code generated by eventcode gen_event --default_export=false; DO NOT EDIT.

package dent

import (
	"fmt"
	event "git.golaxy.org/core/event"
	iface "git.golaxy.org/core/util/iface"
	"git.golaxy.org/core/ec"
)

type iAutoEventDistEntityOnline interface {
	EventDistEntityOnline() event.IEvent
}

func BindEventDistEntityOnline(auto iAutoEventDistEntityOnline, subscriber EventDistEntityOnline, priority ...int32) event.Hook {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	return event.Bind[EventDistEntityOnline](auto.EventDistEntityOnline(), subscriber, priority...)
}

func _EmitEventDistEntityOnline(auto iAutoEventDistEntityOnline, entity ec.Entity) {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	event.UnsafeEvent(auto.EventDistEntityOnline()).Emit(func(subscriber iface.Cache) bool {
		iface.Cache2Iface[EventDistEntityOnline](subscriber).OnDistEntityOnline(entity)
		return true
	})
}

func _EmitEventDistEntityOnlineWithInterrupt(auto iAutoEventDistEntityOnline, interrupt func(entity ec.Entity) bool, entity ec.Entity) {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	event.UnsafeEvent(auto.EventDistEntityOnline()).Emit(func(subscriber iface.Cache) bool {
		if interrupt != nil {
			if interrupt(entity) {
				return false
			}
		}
		iface.Cache2Iface[EventDistEntityOnline](subscriber).OnDistEntityOnline(entity)
		return true
	})
}

func HandleEventDistEntityOnline(fun func(entity ec.Entity)) EventDistEntityOnlineHandler {
	return EventDistEntityOnlineHandler(fun)
}

type EventDistEntityOnlineHandler func(entity ec.Entity)

func (h EventDistEntityOnlineHandler) OnDistEntityOnline(entity ec.Entity) {
	h(entity)
}

type iAutoEventDistEntityOffline interface {
	EventDistEntityOffline() event.IEvent
}

func BindEventDistEntityOffline(auto iAutoEventDistEntityOffline, subscriber EventDistEntityOffline, priority ...int32) event.Hook {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	return event.Bind[EventDistEntityOffline](auto.EventDistEntityOffline(), subscriber, priority...)
}

func _EmitEventDistEntityOffline(auto iAutoEventDistEntityOffline, entity ec.Entity) {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	event.UnsafeEvent(auto.EventDistEntityOffline()).Emit(func(subscriber iface.Cache) bool {
		iface.Cache2Iface[EventDistEntityOffline](subscriber).OnDistEntityOffline(entity)
		return true
	})
}

func _EmitEventDistEntityOfflineWithInterrupt(auto iAutoEventDistEntityOffline, interrupt func(entity ec.Entity) bool, entity ec.Entity) {
	if auto == nil {
		panic(fmt.Errorf("%w: %w: auto is nil", event.ErrEvent, event.ErrArgs))
	}
	event.UnsafeEvent(auto.EventDistEntityOffline()).Emit(func(subscriber iface.Cache) bool {
		if interrupt != nil {
			if interrupt(entity) {
				return false
			}
		}
		iface.Cache2Iface[EventDistEntityOffline](subscriber).OnDistEntityOffline(entity)
		return true
	})
}

func HandleEventDistEntityOffline(fun func(entity ec.Entity)) EventDistEntityOfflineHandler {
	return EventDistEntityOfflineHandler(fun)
}

type EventDistEntityOfflineHandler func(entity ec.Entity)

func (h EventDistEntityOfflineHandler) OnDistEntityOffline(entity ec.Entity) {
	h(entity)
}
