// Code generated by eventcode gen_eventtab --name=distEntitiesEventTab; DO NOT EDIT.

package dent

import (
	event "git.golaxy.org/core/event"
)

type IDistEntitiesEventTab interface {
	EventDistEntityOnline() event.IEvent
	EventDistEntityOffline() event.IEvent
}

var (
	_distEntitiesEventTabId = event.DeclareEventTabIdT[distEntitiesEventTab]()
	EventDistEntityOnlineId = _distEntitiesEventTabId + 0
	EventDistEntityOfflineId = _distEntitiesEventTabId + 1
)

type distEntitiesEventTab [2]event.Event

func (eventTab *distEntitiesEventTab) Init(autoRecover bool, reportError chan error, recursion event.EventRecursion) {
	(*eventTab)[0].Init(autoRecover, reportError, recursion)
	(*eventTab)[1].Init(autoRecover, reportError, recursion)
}

func (eventTab *distEntitiesEventTab) Get(id int) event.IEvent {
	if _distEntitiesEventTabId != id & 0xFFFFFFFF00000000 {
		return nil
	}
	pos := id & 0xFFFFFFFF
	if pos < 0 || pos >= len(*eventTab) {
		return nil
	}
	return &(*eventTab)[pos]
}

func (eventTab *distEntitiesEventTab) Open() {
	for i := range *eventTab {
		(*eventTab)[i].Open()
	}
}

func (eventTab *distEntitiesEventTab) Close() {
	for i := range *eventTab {
		(*eventTab)[i].Close()
	}
}

func (eventTab *distEntitiesEventTab) Clean() {
	for i := range *eventTab {
		(*eventTab)[i].Clean()
	}
}

func (eventTab *distEntitiesEventTab) EventDistEntityOnline() event.IEvent {
	return &(*eventTab)[0]
}

func (eventTab *distEntitiesEventTab) EventDistEntityOffline() event.IEvent {
	return &(*eventTab)[1]
}
