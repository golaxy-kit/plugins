// Code generated by 'yaegi extract git.golaxy.org/core/plugin'. DO NOT EDIT.

package fwlib

import (
	"git.golaxy.org/core/plugin"
	"git.golaxy.org/core/utils/generic"
	"git.golaxy.org/core/utils/iface"
	"reflect"
)

func init() {
	Symbols["git.golaxy.org/core/plugin/plugin"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"ErrPlugin":            reflect.ValueOf(&plugin.ErrPlugin).Elem(),
		"NewPluginBundle":      reflect.ValueOf(plugin.NewPluginBundle),
		"PluginState_Active":   reflect.ValueOf(plugin.PluginState_Active),
		"PluginState_Inactive": reflect.ValueOf(plugin.PluginState_Inactive),
		"PluginState_Loaded":   reflect.ValueOf(plugin.PluginState_Loaded),
		"Uninstall":            reflect.ValueOf(plugin.Uninstall),
		"UnsafePluginBundle":   reflect.ValueOf(plugin.UnsafePluginBundle),
		"UnsafePluginStatus":   reflect.ValueOf(plugin.UnsafePluginStatus),

		// type definitions
		"PluginBundle":   reflect.ValueOf((*plugin.PluginBundle)(nil)),
		"PluginProvider": reflect.ValueOf((*plugin.PluginProvider)(nil)),
		"PluginState":    reflect.ValueOf((*plugin.PluginState)(nil)),
		"PluginStatus":   reflect.ValueOf((*plugin.PluginStatus)(nil)),

		// interface wrapper definitions
		"_PluginBundle":   reflect.ValueOf((*_git_golaxy_org_core_plugin_PluginBundle)(nil)),
		"_PluginProvider": reflect.ValueOf((*_git_golaxy_org_core_plugin_PluginProvider)(nil)),
		"_PluginStatus":   reflect.ValueOf((*_git_golaxy_org_core_plugin_PluginStatus)(nil)),
	}
}

// _git_golaxy_org_core_plugin_PluginBundle is an interface wrapper for PluginBundle type
type _git_golaxy_org_core_plugin_PluginBundle struct {
	IValue           interface{}
	WGet             func(name string) (plugin.PluginStatus, bool)
	WGetPluginBundle func() plugin.PluginBundle
	WInstall         func(pluginFace iface.Face[any], name ...string)
	WRange           func(fun generic.Func1[plugin.PluginStatus, bool])
	WReversedRange   func(fun generic.Func1[plugin.PluginStatus, bool])
	WUninstall       func(name string)
}

func (W _git_golaxy_org_core_plugin_PluginBundle) Get(name string) (plugin.PluginStatus, bool) {
	return W.WGet(name)
}
func (W _git_golaxy_org_core_plugin_PluginBundle) GetPluginBundle() plugin.PluginBundle {
	return W.WGetPluginBundle()
}
func (W _git_golaxy_org_core_plugin_PluginBundle) Install(pluginFace iface.Face[any], name ...string) {
	W.WInstall(pluginFace, name...)
}
func (W _git_golaxy_org_core_plugin_PluginBundle) Range(fun generic.Func1[plugin.PluginStatus, bool]) {
	W.WRange(fun)
}
func (W _git_golaxy_org_core_plugin_PluginBundle) ReversedRange(fun generic.Func1[plugin.PluginStatus, bool]) {
	W.WReversedRange(fun)
}
func (W _git_golaxy_org_core_plugin_PluginBundle) Uninstall(name string) {
	W.WUninstall(name)
}

// _git_golaxy_org_core_plugin_PluginProvider is an interface wrapper for PluginProvider type
type _git_golaxy_org_core_plugin_PluginProvider struct {
	IValue           interface{}
	WGetPluginBundle func() plugin.PluginBundle
}

func (W _git_golaxy_org_core_plugin_PluginProvider) GetPluginBundle() plugin.PluginBundle {
	return W.WGetPluginBundle()
}

// _git_golaxy_org_core_plugin_PluginStatus is an interface wrapper for PluginStatus type
type _git_golaxy_org_core_plugin_PluginStatus struct {
	IValue        interface{}
	WInstanceFace func() iface.Face[any]
	WName         func() string
	WReflected    func() reflect.Value
	WState        func() plugin.PluginState
}

func (W _git_golaxy_org_core_plugin_PluginStatus) InstanceFace() iface.Face[any] {
	return W.WInstanceFace()
}
func (W _git_golaxy_org_core_plugin_PluginStatus) Name() string {
	return W.WName()
}
func (W _git_golaxy_org_core_plugin_PluginStatus) Reflected() reflect.Value {
	return W.WReflected()
}
func (W _git_golaxy_org_core_plugin_PluginStatus) State() plugin.PluginState {
	return W.WState()
}
