// Code generated by eventc eventtab --name=distEntityRegistryEventTab; DO NOT EDIT.

package dentr

import (
	event "git.golaxy.org/core/event"
)

type IDistEntityRegistryEventTab interface {
	EventDistEntityOnline() event.IEvent
	EventDistEntityOffline() event.IEvent
}

var (
	_distEntityRegistryEventTabId = event.DeclareEventTabIdT[distEntityRegistryEventTab]()
	EventDistEntityOnlineId = _distEntityRegistryEventTabId + 0
	EventDistEntityOfflineId = _distEntityRegistryEventTabId + 1
)

type distEntityRegistryEventTab [2]event.Event

func (eventTab *distEntityRegistryEventTab) Init(autoRecover bool, reportError chan error, recursion event.EventRecursion) {
	(*eventTab)[0].Init(autoRecover, reportError, recursion)
	(*eventTab)[1].Init(autoRecover, reportError, recursion)
}

func (eventTab *distEntityRegistryEventTab) Get(id uint64) event.IEvent {
	if _distEntityRegistryEventTabId != id & 0xFFFFFFFF00000000 {
		return nil
	}
	pos := id & 0xFFFFFFFF
	if pos >= uint64(len(*eventTab)) {
		return nil
	}
	return &(*eventTab)[pos]
}

func (eventTab *distEntityRegistryEventTab) Open() {
	for i := range *eventTab {
		(*eventTab)[i].Open()
	}
}

func (eventTab *distEntityRegistryEventTab) Close() {
	for i := range *eventTab {
		(*eventTab)[i].Close()
	}
}

func (eventTab *distEntityRegistryEventTab) Clean() {
	for i := range *eventTab {
		(*eventTab)[i].Clean()
	}
}

func (eventTab *distEntityRegistryEventTab) EventDistEntityOnline() event.IEvent {
	return &(*eventTab)[0]
}

func (eventTab *distEntityRegistryEventTab) EventDistEntityOffline() event.IEvent {
	return &(*eventTab)[1]
}
